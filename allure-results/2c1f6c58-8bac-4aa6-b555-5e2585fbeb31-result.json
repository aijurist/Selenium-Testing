{"name": "Complete checkout flow on SauceDemo", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eb8eba350b0034774a68cb285d7899e3\")>\n\n    @allure.title(\"Complete checkout flow on SauceDemo\")\n    @allure.description(\"Logs in, adds a product to the cart, proceeds to checkout, and verifies order completion.\")\n    @pytest.mark.checkout\n    def test_checkout_flow(driver):\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Open login page\"):\n            driver.get(\"https://www.saucedemo.com/\")\n    \n        with allure.step(\"Enter username and password\"):\n            driver.find_element(By.ID, \"user-name\").send_keys(\"standard_user\")\n            driver.find_element(By.ID, \"password\").send_keys(\"secret_sauce\")\n    \n        with allure.step(\"Click login button\"):\n            driver.find_element(By.ID, \"login-button\").click()\n            wait.until(EC.url_contains(\"inventory\"))\n    \n        with allure.step(\"Add first product to cart\"):\n            driver.find_elements(By.CSS_SELECTOR, \".btn_inventory\")[0].click()\n    \n        with allure.step(\"Go to cart page\"):\n            driver.find_element(By.CLASS_NAME, \"shopping_cart_link\").click()\n            wait.until(EC.url_contains(\"cart\"))\n    \n        with allure.step(\"Click checkout\"):\n            driver.find_element(By.ID, \"checkout\").click()\n>           wait.until(EC.url_contains(\"checkout-step-one\"))\n\ntests\\test_checkout.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"eb8eba350b0034774a68cb285d7899e3\")>, method = <function url_contains.<locals>._predicate at 0x00000237368BDF80>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "Logs in, adds a product to the cart, proceeds to checkout, and verifies order completion.", "steps": [{"name": "Open login page", "status": "passed", "start": 1755234924499, "stop": 1755234924772}, {"name": "Enter username and password", "status": "passed", "start": 1755234924772, "stop": 1755234924876}, {"name": "Click login button", "status": "passed", "start": 1755234924876, "stop": 1755234924940}, {"name": "Add first product to cart", "status": "passed", "start": 1755234924940, "stop": 1755234924986}, {"name": "Go to cart page", "status": "passed", "start": 1755234924986, "stop": 1755234925029}, {"name": "Click checkout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"D:\\selenium_testing\\tests\\test_checkout.py\", line 34, in test_checkout_flow\n    wait.until(EC.url_contains(\"checkout-step-one\"))\n  File \"d:\\selenium_testing\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1755234925029, "stop": 1755234935279}], "start": 1755234924499, "stop": 1755234935280, "uuid": "4ad7475d-8f07-48d9-babf-34823438ff9d", "historyId": "6456a9a2c3086ce8e43bdb35ec39866a", "testCaseId": "6456a9a2c3086ce8e43bdb35ec39866a", "fullName": "tests.test_checkout#test_checkout_flow", "labels": [{"name": "tag", "value": "checkout"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_checkout"}, {"name": "host", "value": "DESKTOP-GQ1J3MB"}, {"name": "thread", "value": "3496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_checkout"}], "titlePath": ["tests", "test_checkout.py"]}